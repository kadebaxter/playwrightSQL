--works
CREATE OR REPLACE FUNCTION make_actual_play_time(p_day_of_week text, p_time_of_day int, start_day timestamp)
RETURNS timestamp AS $$
DECLARE
    start_d date := date(start_day);
    start_dow int;
    template_dow int;
    day_offset int;
    computed_play_time timestamp;
BEGIN
  
    start_dow := extract(dow from start_d)::int;

    CASE p_day_of_week
        WHEN 'Sunday' THEN template_dow := 0;
        WHEN 'Monday' THEN template_dow := 1;
        WHEN 'Tuesday' THEN template_dow := 2;
        WHEN 'Wednesday' THEN template_dow := 3;
        WHEN 'Thursday' THEN template_dow := 4;
        WHEN 'Friday' THEN template_dow := 5;
        WHEN 'Saturday' THEN template_dow := 6;
        ELSE
            RAISE EXCEPTION 'Invalid day of week: %', p_day_of_week;
    END CASE;

    day_offset := (template_dow - start_dow + 7) % 7;

    IF day_offset = 0 AND ((start_d + ((p_time_of_day::text || ' hours')::interval)) < start_day) THEN
        day_offset := 7;
    END IF;

    computed_play_time := (start_d + day_offset) + ((p_time_of_day::text || ' hours')::interval);

    RETURN computed_play_time;
END;
$$ LANGUAGE plpgsql;

--works
CREATE OR REPLACE PROCEDURE make_actual_week_schedule(start_day timestamp)
LANGUAGE plpgsql
AS $procedure$
BEGIN
    INSERT INTO actual_schedule_play(theatre_id, scheduled_time)
    SELECT 
        theatre_id, 
        make_actual_play_time(day_of_week, time_of_day, start_day) AS scheduled_time
    FROM schedule_play_template_week;
END;
$procedure$;

--works
create or replace procedure populate_theatre_complex() as $$
begin
	insert into complex(address) values (concat(floor(random() * 101), ' Street'));
	insert into complex(address) values (concat(floor(random() * 101), ' Street'));
	insert into theatre(max_capacity, complex_id) 
		select floor(random() * 501)
		, (select id from complex order by random() limit 1) as complex_id 
		from generate_series(1, 3, 1);
end;
$$ language plpgsql;

--works
create or replace procedure make_play_template_data() as $$
declare
	theatre_ids int[];
begin
	select array_agg(id order by id) into theatre_ids from theatre;

	insert into schedule_play_template_week(theatre_id, day_of_week, time_of_day)
	select 
		theatre_ids[(series.n % array_length(theatre_ids, 1)) + 1] as theatre_id
		, case (series.n / 13)
			when 0 then 'Monday'
			when 1 then 'Tuesday'
			when 2 then 'Wednesday'
			when 3 then 'Thursday'
			when 4 then 'Friday'
			when 5 then 'Saturday'
			when 6 then 'Sunday'
		end as day_of_week
		, (series.n % 13) + 7 as time_of_day
	from generate_series(0, 90) as series(n);
	
end;
$$ language plpgsql;

--works
create or replace procedure make_performer_template_data() as $$
declare
	cert_1_ids int[];
	cert_2_ids int[];
	dual_cert_ids int[];
	cert_5_ids int[];
	cert_6_ids int[];
	cert_7_ids int[];
	cert_8_ids int[];
	cert_9_ids int[];
begin
	select array_agg(id order by id) into cert_1_ids from part_certification_1;
	select array_agg(id order by id) into cert_2_ids from part_certification_2;
	select array_agg(id order by id) into dual_cert_ids from dual_part_certification;
	select array_agg(id order by id) into cert_5_ids from part_certification_5;
	select array_agg(id order by id) into cert_6_ids from part_certification_6;
	select array_agg(id order by id) into cert_7_ids from part_certification_7;
	select array_agg(id order by id) into cert_8_ids from part_certification_8;
	select array_agg(id order by id) into cert_9_ids from part_certification_9;

	insert into schedule_performer_template(schedule_template_id, cert_1_id, cert_2_id, dual_cert_id, cert_5_id, cert_6_id, cert_7_id, cert_8_id, cert_9_id)
	select 
		series.n as schedule_template_id
		, cert_1_ids[(series.n % array_length(cert_1_ids, 1)) + 1] as cert_1_id
		, cert_2_ids[(series.n % array_length(cert_2_ids, 1)) + 1] as cert_2_id
		, dual_cert_ids[(series.n % array_length(cert_1_ids, 1)) + 1] as cert_1_id
		, cert_5_ids[(series.n % array_length(cert_5_ids, 1)) + 1] as cert_5_id
		, cert_6_ids[(series.n % array_length(cert_6_ids, 1)) + 1] as cert_6_id
		, cert_7_ids[(series.n % array_length(cert_7_ids, 1)) + 1] as cert_7_id
		, cert_8_ids[(series.n % array_length(cert_8_ids, 1)) + 1] as cert_8_id
		, cert_9_ids[(series.n % array_length(cert_9_ids, 1)) + 1] as cert_9_id
	from generate_series(1, 91) as series(n);
end;
$$ language plpgsql;

--works
create or replace procedure set_performer_certifications() as $$
declare
	i int;
begin
	for i in select id from performer order by id loop
		if i % 9 = 0 then
			insert into part_certification_1(performer_id, date_certified, date_expires)
			values (i, now(), now() + interval '3 months');
		elsif i % 9 = 1 then
			insert into part_certification_2(performer_id, date_certified, date_expires)
			values (i, now(), now() + interval '3 months');
		elsif i % 9 = 2 then
			insert into dual_part_certification(performer_part_3_id, performer_part_4_id, date_certified, date_expires)
			values (i, i + 1, now(), now() + interval '3 months');
		elsif i % 9 = 4 then
			insert into part_certification_5(performer_id, date_certified, date_expires)
			values (i, now(), now() + interval '3 months');
		elsif i % 9 = 5 then
			insert into part_certification_6(performer_id, date_certified, date_expires)
			values (i, now(), now() + interval '3 months');
		elsif i % 9 = 6 then
			insert into part_certification_7(performer_id, date_certified, date_expires)
			values (i, now(), now() + interval '3 months');
		elsif i % 9 = 7 then
			insert into part_certification_8(performer_id, date_certified, date_expires)
			values (i, now(), now() + interval '3 months');
		elsif i % 9 = 8 then
			insert into part_certification_9(performer_id, date_certified, date_expires)
			values (i, now(), now() + interval '3 months');
		end if;
	end loop;
end;
$$ language plpgsql;

--works
create or replace procedure make_actual_performer_schedule(day_to_schedule timestamp) as $$
declare
	asp_id int;
	asp_scheduled_time timestamp;	
	next_dow varchar(10);
	next_hour int;
begin
	for asp_id, asp_scheduled_time in select id, scheduled_time from actual_schedule_play where scheduled_time >= day_to_schedule
	loop 
		next_dow = to_char(asp_scheduled_time, 'FMDay');
		next_hour = extract(hour from asp_scheduled_time)::int;

		insert into actual_schedule_performer(schedule_id, cert_1_id, cert_2_id, dual_cert_id, cert_5_id, cert_6_id, cert_7_id, cert_8_id, cert_9_id)
		select asp_id, spt.cert_1_id, spt.cert_2_id, spt.dual_cert_id, spt.cert_5_id, spt.cert_6_id, spt.cert_7_id, spt.cert_8_id, spt.cert_9_id
		from schedule_performer_template spt inner join schedule_play_template_week sptw on (sptw.id = spt.schedule_template_id)
		where sptw.day_of_week = next_dow and sptw.time_of_day = next_hour;
			
	end loop;
end;
$$ language plpgsql;

--Check truncated
select * from schedule_play_template_week;
select * from schedule_performer_template;
select * from actual_schedule_play;
select * from actual_schedule_performer;
select * from performer p ;
select * from theatre t ;

--Script for data
truncate table complex cascade;
alter sequence schedule_play_template_week_id_seq restart with 1;
alter sequence schedule_performer_template_id_seq restart with 1;
alter sequence complex_id_seq restart with 1;
alter sequence theatre_id_seq restart with 1;
alter sequence actual_schedule_performer_id_seq restart with 1;
alter sequence actual_schedule_play_id_seq restart with 1;

call populate_theatre_complex();
call make_play_template_data();
call make_performer_template_data();

call make_actual_week_schedule((now() + interval '2 weeks')::timestamp);
call make_actual_performer_schedule('2025-04-09 7:00:00.000');